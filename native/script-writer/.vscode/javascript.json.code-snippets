{
    // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "CSS Template": {
        "scope": "javascript",
        "prefix": ["css", "css-template"],
        "description": "Boiler plate code for a CSS templated string",
        "body": [
            "const cssTemplate = () => /*css*/`",
            "   $0",
            "`"
        ],
    },
    "Style Template": {
        "scope": "javascript",
        "prefix": ["style", "style-template"],
        "description": "Boiler plate code for templated CSS in a style element",
        "body": [
            "const styleTemplate = () => {",
            "    const \\$style = document.createElement(\"style\")",
            "    \\$style.textContent = /*css*/`",
            "        $0",
            "    `",
            "    return \\$style",
            "}"
        ]
    },
    "Document Fragment": {
        "scope": "javascript",
        "prefix": ["fragment"],
        "description": "Boiler plate code to create a Document Fragment using template tag",
        "body": [
            "const fragment = () => {",
            "    const \\$template = document.createElement(\"template\")",
            "    \\$template.innerHTML = /*html*/`",
            "        $0",
            "    `",
            "    return \\$template.content",
            "}"
        ]
    },
    "Web Component Class": {
        "scope": "javascript",
        "prefix": ["class", "web-component"],
        "description": "Boiler plate code for a web component",
        "body": [
            "export default class $1 extends HTMLElement {",
            "    static get observedAttributes() { return [] }",
            "    constructor() {",
            "        super()",
            "        $0",
            "    }",
            "    connectedCallback() {}",
            "    disconnectedCallback() {}",
            "    attributeChangedCallback(name, oldValue, newValue) {}",
            "    adoptedCallback() {}",
            "}",
            "",
            "customElements.define(\"$2\", $1)"
        ]
    },
    "Element": {
        "scope": "javascript",
        "prefix": ["element"],
        "description": "Boilerplate for creating a element",
        "body": [
            "const $1 = document.createElement(\"$2\")"
        ]
    },
    "Private property": {
        "scope": "javascript",
        "prefix": ["private", "#"],
        "description": "Boilerplate code for creating a property",
        "body": [
            "#$1",
            "get $1() { return this.#$1 }",
            "set $1(value) { this.#$1 = value }"
        ]
    },
    "Web Component Attribute": {
        "scope": "javascript",
        "prefix": ["attribute", "#"],
        "description": "Boilerplate code for creating atribute accessors",
        "body": [
            "get $1() { return this.getAttribute(\"$1\") }",
            "set $1(value) { this.setAttribute(\"$1\", value) }"
        ]
    }
}